$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module lsu_tb $end
   $var wire 1 i clk $end
   $var wire 1 # rst_n $end
   $var wire 1 $ lsu_wren $end
   $var wire 32 % i_lsu_addr [31:0] $end
   $var wire 32 & i_st_data [31:0] $end
   $var wire 32 ' i_instr [31:0] $end
   $var wire 32 ( i_io_sw [31:0] $end
   $var wire 4 ) i_io_btn [3:0] $end
   $var wire 7 \ o_io_hex0 [6:0] $end
   $var wire 7 ] o_io_hex1 [6:0] $end
   $var wire 7 ^ o_io_hex2 [6:0] $end
   $var wire 7 _ o_io_hex3 [6:0] $end
   $var wire 7 ` o_io_hex4 [6:0] $end
   $var wire 7 a o_io_hex5 [6:0] $end
   $var wire 7 b o_io_hex6 [6:0] $end
   $var wire 7 c o_io_hex7 [6:0] $end
   $var wire 32 j o_ld_data [31:0] $end
   $var wire 32 d o_io_ledr [31:0] $end
   $var wire 32 e o_io_ledg [31:0] $end
   $var wire 32 f o_io_lcd [31:0] $end
   $scope module uut $end
    $var wire 1 i i_clk $end
    $var wire 1 # i_rst_n $end
    $var wire 1 $ i_lsu_wren $end
    $var wire 32 % i_lsu_addr [31:0] $end
    $var wire 32 & i_st_data [31:0] $end
    $var wire 32 ' i_instr [31:0] $end
    $var wire 4 ) i_io_btn [3:0] $end
    $var wire 32 ( i_io_sw [31:0] $end
    $var wire 7 \ o_io_hex0 [6:0] $end
    $var wire 7 ] o_io_hex1 [6:0] $end
    $var wire 7 ^ o_io_hex2 [6:0] $end
    $var wire 7 _ o_io_hex3 [6:0] $end
    $var wire 7 ` o_io_hex4 [6:0] $end
    $var wire 7 a o_io_hex5 [6:0] $end
    $var wire 7 b o_io_hex6 [6:0] $end
    $var wire 7 c o_io_hex7 [6:0] $end
    $var wire 32 j o_ld_data [31:0] $end
    $var wire 32 d o_io_ledr [31:0] $end
    $var wire 32 e o_io_ledg [31:0] $end
    $var wire 32 f o_io_lcd [31:0] $end
    $var wire 32 - r_input_data [31:0] $end
    $var wire 32 R r_output_data [31:0] $end
    $var wire 32 S r_dmem_data [31:0] $end
    $scope module dmem $end
     $var wire 1 i i_clk $end
     $var wire 1 # i_rst_n $end
     $var wire 1 $ i_lsu_wren $end
     $var wire 3 * i_func3 [2:0] $end
     $var wire 32 % i_lsu_addr [31:0] $end
     $var wire 32 & i_st_data [31:0] $end
     $var wire 32 S o_dmem_data [31:0] $end
     $var wire 3 k SB [2:0] $end
     $var wire 3 l SH [2:0] $end
     $var wire 3 m SW [2:0] $end
     $var wire 3 k LB [2:0] $end
     $var wire 3 l LH [2:0] $end
     $var wire 3 m LW [2:0] $end
     $var wire 3 n LBU [2:0] $end
     $var wire 3 o LHU [2:0] $end
     $var wire 16 + temp_addr [15:0] $end
     $var wire 8 T temp_data[0] [7:0] $end
     $var wire 8 U temp_data[1] [7:0] $end
     $var wire 8 V temp_data[2] [7:0] $end
     $var wire 8 W temp_data[3] [7:0] $end
     $var wire 32 p D_MEM_SIZE [31:0] $end
     $var wire 64 g i [63:0] $end
     $var wire 16 q dmem_addr [15:0] $end
     $var wire 16 r end_addr [15:0] $end
    $upscope $end
    $scope module input_buf $end
     $var wire 3 * i_func3 [2:0] $end
     $var wire 32 % i_lsu_addr [31:0] $end
     $var wire 32 ( i_io_sw [31:0] $end
     $var wire 4 ) i_io_btn [3:0] $end
     $var wire 32 - o_input_buf_data [31:0] $end
     $var wire 32 s I_BUF_SIZE [31:0] $end
     $var wire 8 . in_buf[0] [7:0] $end
     $var wire 8 / in_buf[1] [7:0] $end
     $var wire 8 0 in_buf[2] [7:0] $end
     $var wire 8 1 in_buf[3] [7:0] $end
     $var wire 8 2 in_buf[4] [7:0] $end
     $var wire 8 3 in_buf[5] [7:0] $end
     $var wire 8 4 in_buf[6] [7:0] $end
     $var wire 8 5 in_buf[7] [7:0] $end
     $var wire 8 6 in_buf[8] [7:0] $end
     $var wire 8 7 in_buf[9] [7:0] $end
     $var wire 8 8 in_buf[10] [7:0] $end
     $var wire 8 9 in_buf[11] [7:0] $end
     $var wire 8 : in_buf[12] [7:0] $end
     $var wire 8 ; in_buf[13] [7:0] $end
     $var wire 8 < in_buf[14] [7:0] $end
     $var wire 8 = in_buf[15] [7:0] $end
     $var wire 8 > in_buf[16] [7:0] $end
     $var wire 8 ? in_buf[17] [7:0] $end
     $var wire 8 @ in_buf[18] [7:0] $end
     $var wire 8 A in_buf[19] [7:0] $end
     $var wire 8 B in_buf[20] [7:0] $end
     $var wire 8 C in_buf[21] [7:0] $end
     $var wire 8 D in_buf[22] [7:0] $end
     $var wire 8 E in_buf[23] [7:0] $end
     $var wire 8 F in_buf[24] [7:0] $end
     $var wire 8 G in_buf[25] [7:0] $end
     $var wire 8 H in_buf[26] [7:0] $end
     $var wire 8 I in_buf[27] [7:0] $end
     $var wire 8 J in_buf[28] [7:0] $end
     $var wire 8 K in_buf[29] [7:0] $end
     $var wire 8 L in_buf[30] [7:0] $end
     $var wire 8 M in_buf[31] [7:0] $end
     $var wire 3 k SB [2:0] $end
     $var wire 3 l SH [2:0] $end
     $var wire 3 m SW [2:0] $end
     $var wire 8 t sw_addr [7:0] $end
     $var wire 8 u btn_addr [7:0] $end
     $var wire 8 v end_addr [7:0] $end
     $var wire 8 N temp_data[0] [7:0] $end
     $var wire 8 O temp_data[1] [7:0] $end
     $var wire 8 P temp_data[2] [7:0] $end
     $var wire 8 Q temp_data[3] [7:0] $end
     $var wire 8 , temp_addr [7:0] $end
    $upscope $end
    $scope module output_buf $end
     $var wire 1 i i_clk $end
     $var wire 1 # i_rst_n $end
     $var wire 1 $ i_lsu_wren $end
     $var wire 3 * i_func3 [2:0] $end
     $var wire 32 % i_lsu_addr [31:0] $end
     $var wire 32 & i_output_buf_data [31:0] $end
     $var wire 32 R o_output_buf_data [31:0] $end
     $var wire 32 d o_io_ledr [31:0] $end
     $var wire 32 e o_io_ledg [31:0] $end
     $var wire 7 \ o_io_hex0 [6:0] $end
     $var wire 7 ] o_io_hex1 [6:0] $end
     $var wire 7 ^ o_io_hex2 [6:0] $end
     $var wire 7 _ o_io_hex3 [6:0] $end
     $var wire 7 ` o_io_hex4 [6:0] $end
     $var wire 7 a o_io_hex5 [6:0] $end
     $var wire 7 b o_io_hex6 [6:0] $end
     $var wire 7 c o_io_hex7 [6:0] $end
     $var wire 32 f o_io_lcd [31:0] $end
     $var wire 32 w O_BUF_SIZE [31:0] $end
     $var wire 3 k LB [2:0] $end
     $var wire 3 l LH [2:0] $end
     $var wire 3 m LW [2:0] $end
     $var wire 3 n LBU [2:0] $end
     $var wire 3 o LHU [2:0] $end
     $var wire 8 t ledr_addr [7:0] $end
     $var wire 8 u ledg_addr [7:0] $end
     $var wire 8 x hex0_addr [7:0] $end
     $var wire 8 y hex1_addr [7:0] $end
     $var wire 8 z hex2_addr [7:0] $end
     $var wire 8 { hex3_addr [7:0] $end
     $var wire 8 | hex4_addr [7:0] $end
     $var wire 8 } hex5_addr [7:0] $end
     $var wire 8 ~ hex6_addr [7:0] $end
     $var wire 8 !! hex7_addr [7:0] $end
     $var wire 8 "! lcd_addr [7:0] $end
     $var wire 8 #! end_addr [7:0] $end
     $var wire 8 X temp_data[0] [7:0] $end
     $var wire 8 Y temp_data[1] [7:0] $end
     $var wire 8 Z temp_data[2] [7:0] $end
     $var wire 8 [ temp_data[3] [7:0] $end
     $var wire 8 , temp_addr [7:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b0000 )
b000 *
b0000000000000000 +
b00000000 ,
b00000000000000000000000000000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
b00000000 O
b00000000 P
b00000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000 T
b00000000 U
b00000000 V
b00000000 W
b00000000 X
b00000000 Y
b00000000 Z
b00000000 [
b0000000 \
b0000000 ]
b0000000 ^
b0000000 _
b0000000 `
b0000000 a
b0000000 b
b0000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b0000000000000000000000000000000000000000000000000000000000000000 g
0i
b00000000000000000000000000000000 j
b000 k
b001 l
b010 m
b100 n
b101 o
b00000000000000000000001111101000 p
b0010000000000000 q
b0011111111111111 r
b00000000000000000000000000100000 s
b00000000 t
b00010000 u
b00011111 v
b00000000000000000000000001000000 w
b00100000 x
b00100001 y
b00100010 z
b00100011 {
b00100100 |
b00100101 }
b00100110 ~
b00100111 !!
b00110000 "!
b11111111 #!
#5000
b0000000000000000000000000000000000000000000000000000001111101000 g
1i
#10000
0i
#15000
1i
#20000
1#
0i
#25000
1i
#30000
1$
b00000000000000000010000000000000 %
b00000000000000000010100100001001 &
b0010000000000000 +
0i
#35000
b00000000000000000000000000001001 S
b00001001 T
1i
b00000000000000000000000000001001 j
#40000
0$
0i
#45000
1i
#50000
0i
#55000
1i
#60000
0i
#65000
1i
#70000
b00000000000000000111100000000000 %
b00010010001101000101011001111000 (
b0111100000000000 +
b00000000000000000000000001111000 -
b01111000 .
b01010110 /
b00110100 0
b00010010 1
b01111000 N
b01010110 O
b00110100 P
b00010010 Q
b00000000000000000000000000000000 S
b00000000 T
0i
b00000000000000000000000001111001 j
#75000
1i
#80000
0i
#85000
1i
#90000
b00000000000000000111100000010000 %
b1010 )
b0111100000010000 +
b00010000 ,
b00000000000000000000000000001010 -
b00001010 >
b00001010 N
b00000000 O
b00000000 P
b00000000 Q
0i
b00000000000000000000000000001011 j
#95000
1i
#100000
0i
#105000
1i
#110000
1$
b00000000000000000111000000100000 %
b00001111000011110000111100001111 &
b0111000000100000 +
b00100000 ,
b00000000000000000000000000000000 -
b00000000 N
0i
#115000
b00000000000000000000000000001111 R
b00001111 X
b0001111 \
1i
b00000000000000000000000000001111 j
#120000
0$
0i
#125000
1i
#130000
0i
#135000
1i
#140000
1$
b00000000000000000111000000010000 %
b01010101101010100101010110101010 &
b0111000000010000 +
b00010000 ,
b00000000000000000000000000001010 -
b00001010 N
b00000000000000000000000000000000 R
b00000000 X
0i
b00000000000000000000000000001011 j
#145000
b11111111111111111111111110101010 R
b10101010 X
b00000000000000000000000010101010 e
1i
b11111111111111111111111110101011 j
#150000
0$
0i
#155000
1i
#160000
0i
#165000
1i
#170000
1$
b00000000000000000111000000000000 %
b11111111000000001111111100000000 &
b0111000000000000 +
b00000000 ,
b00000000000000000000000001111000 -
b01111000 N
b01010110 O
b00110100 P
b00010010 Q
b00000000000000000000000000000000 R
b00000000 X
0i
b00000000000000000000000000001011 j
#175000
1i
#180000
0$
0i
#185000
1i
#190000
0i
#195000
1i
#200000
1$
b00000000000000000111000000110000 %
b11001010111111101011101010111110 &
b0111000000110000 +
b00110000 ,
b00000000000000000000000000000000 -
b00000000 N
b00000000 O
b00000000 P
b00000000 Q
0i
#205000
b11111111111111111111111110111110 R
b10111110 X
b00000000000000000000000010111110 f
1i
b11111111111111111111111110111111 j
#210000
0$
0i
#215000
1i
#220000
0i
#225000
1i
#230000
0i
#235000
1i
#240000
0i
